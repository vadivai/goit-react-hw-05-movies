{"version":3,"file":"static/js/259.3231108e.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.js","pages/Movies.js","hooks/useFetchSearch.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\n// export const SearchbarStyled = styled.header`\n//   top: 0;\n//   left: 0;\n//   position: sticky;\n//   z-index: 1100;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   min-height: 32px;\n//   padding-right: 24px;\n//   padding-left: 24px;\n//   color: #fff;\n//   background-color: #3f51b5;\n//   box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n//     0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n// `;\n\nexport const SearchFormStyled = styled.form`\n  display: flex;\n  align-items: center;\n  /* justify-content: space-evenly; */\n  /* width: 100%; */\n  /* max-width: 350px; */\n  /* background-color: grey; */\n  /* border-radius: 3px;\n  /* overflow: hidden; */\n  /* padding: 0 4px 2px; */\n`;\n\nexport const SearchInputStyled = styled.input`\n  display: inline-block;\n  width: 25%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  background-color: #ebeded;\n  border-radius: 6px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n    align-items: center;\n  }\n`;\n\nexport const SearchButtonStyled = styled.button`\n  display: inline-block;\n  border: 0;\n  padding: 6px;\n  /* opacity: 0.6; */\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  padding: 10px 2px;\n  border-radius: 6px;\n  background-color: #ebeded;\n  margin-left: 15px;\n\n  &:hover {\n    opacity: 1;\n    color: white;\n    background-color: #474fed;\n  }\n`;\n","import { useSearchParams } from 'react-router-dom';\nimport {\n  SearchButtonStyled,\n  SearchFormStyled,\n  SearchInputStyled,\n} from './SearchBar.styled';\nimport { useState } from 'react';\n\nexport const Searchbar = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const [, setSearchParams] = useSearchParams();\n  const onChange = e => {\n    setSearchQuery(e.target.value);\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    if (searchQuery === '') {\n      return alert('PLEASE, ENTER MOVIE NAME!');\n    }\n\n    setSearchParams({ query: searchQuery });\n    // const onHandleSubmit = value => {\n    //   setSearchParams({ query: value });\n    // };\n    setSearchQuery('');\n  };\n\n  return (\n    <SearchFormStyled onSubmit={onSubmit}>\n      <SearchInputStyled\n        type=\"text\"\n        name=\"movieName\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie\"\n        value={searchQuery}\n        onChange={onChange}\n      />\n      <SearchButtonStyled type=\"submit\">Search</SearchButtonStyled>\n    </SearchFormStyled>\n  );\n};\n","import React from 'react';\nimport { Searchbar } from 'components/SearchBar/SearchBar';\nimport { useFetchSearch } from 'hooks/useFetchSearch';\nimport { MoviesList } from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const { movies, isLoading, error } = useFetchSearch();\n\n  return (\n    <>\n      <Searchbar />\n      {isLoading && <h3>Loading...</h3>}\n      {error && <h2>Something went wrong...</h2>}\n      {movies.length > 0 && <MoviesList movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovies } from 'service/api';\n\nexport const useFetchSearch = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n  // console.log('searchParams', searchQuery );\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    setIsLoading(true);\n    setError(false);\n\n    const getSearchMovies = async () => {\n      try {\n        const data = await fetchSearchMovies(searchQuery);\n        // console.log('SearchMovies', data);\n        setMovies(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getSearchMovies();\n  }, [searchQuery]);\n\n  // const onHandleSubmit = value => {\n  //   setSearchParams({ query: value });\n  // };\n  // setSearchParams({ query: movieName });\n\n  return { movies, isLoading, error };\n};\n"],"names":["MoviesList","_ref","movies","location","useLocation","_jsx","children","map","_ref2","id","title","Link","to","concat","state","from","SearchFormStyled","styled","_templateObject","_taggedTemplateLiteral","SearchInputStyled","_templateObject2","SearchButtonStyled","_templateObject3","Searchbar","_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","_useSearchParams","useSearchParams","setSearchParams","_jsxs","onSubmit","event","preventDefault","alert","query","type","name","autoComplete","autoFocus","placeholder","value","onChange","e","target","_useFetchSearch","_searchParams$get","setMovies","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","get","useEffect","getSearchMovies","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchSearchMovies","sent","t0","finish","stop","apply","arguments","useFetchSearch","_Fragment","length"],"sourceRoot":""}