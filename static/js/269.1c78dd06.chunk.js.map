{"version":3,"file":"static/js/269.1c78dd06.chunk.js","mappings":"uSAEaA,EAAaC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qHAQtBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+BAIpBG,EAAWL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,6D,SCXrBK,EAAW,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SACzB,OACEC,EAAAA,EAAAA,KAACX,EAAU,CAAAY,SACRF,EAASG,KAAI,SAAAC,GAAiD,IAA9CC,EAAOD,EAAPC,QAASC,EAAYF,EAAZE,aAAcC,EAAIH,EAAJG,KAAMC,EAASJ,EAATI,UAC5C,OACEC,EAAAA,EAAAA,MAACf,EAAQ,CAAAQ,SAAA,CACNI,GACCL,EAAAA,EAAAA,KAAA,OACES,IAAG,mCAAAC,OAAqCL,GACxCM,IAAKL,KAGPN,EAAAA,EAAAA,KAACL,EAAQ,KAGXK,EAAAA,EAAAA,KAAA,KAAAC,SAAIK,KACJE,EAAAA,EAAAA,MAAA,KAAAP,SAAA,CAAG,SAAOM,OAXGH,EAcnB,KAGN,ECrBaQ,EAAO,WAClB,IAAAC,ECD+B,WAC/B,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAlCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACdG,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACRP,GAAa,GACbI,GAAS,GAET,IAAMI,EAAW,eAAAjC,GAAAkC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEGC,EAAAA,EAAAA,IAAiBX,GAAS,KAAD,EAAtCO,EAAIC,EAAAI,KACVrB,EAAQgB,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEdT,EAAQS,EAAAK,IAAQ,QAEI,OAFJL,EAAAC,KAAA,GAEhBd,GAAa,GAAOa,EAAAM,OAAA,6BAAAN,EAAAO,OAAA,GAAAT,EAAA,wBAEvB,kBATgB,OAAApC,EAAA8C,MAAA,KAAAC,UAAA,KAWjBd,GACF,GAAG,CAACH,IAEG,CAAEV,KAAAA,EAAMI,UAAAA,EAAWI,MAAAA,EAC5B,CDxBqCoB,GAA3B5B,EAAIL,EAAJK,KAAMI,EAAST,EAATS,UAAWI,EAAKb,EAALa,MAEzB,OACElB,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAA9C,SAAA,CACGqB,IAAatB,EAAAA,EAAAA,KAAA,MAAAC,SAAI,eACjByB,IAAS1B,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4BACbiB,IAAQlB,EAAAA,EAAAA,KAACH,EAAQ,CAACE,SAAUmB,MAGnC,EAEA,G","sources":["components/CastInfo/CastInfo.styled.js","components/CastInfo/CastInfo.js","components/Cast/Cast.js","hooks/useFetchCast.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  list-style: none;\n  /* justify-content: center; */\n`;\n\nexport const CastItem = styled.li`\n  max-width: 170px;\n`;\n\nexport const NoPhoto2 = styled.div`\n  width: 180px;\n  height: 255px;\n  color: grey;\n`;\n","// import { NoPhoto } from 'other/NotFoundPhoto';\nimport { CastItem, CastStyled, NoPhoto2 } from './CastInfo.styled';\n\nexport const CastInfo = ({ castInfo }) => {\n  return (\n    <CastStyled>\n      {castInfo.map(({ cast_id, profile_path, name, character }) => {\n        return (\n          <CastItem key={cast_id}>\n            {profile_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                alt={name}\n              />\n            ) : (\n              <NoPhoto2 />\n              //   <NoPhoto />\n            )}\n            <p>{name}</p>\n            <p>Role: {character}</p>\n          </CastItem>\n        );\n      })}\n    </CastStyled>\n  );\n};\n","import React from 'react';\nimport { useFetchMovieCast } from 'hooks/useFetchCast';\nimport { CastInfo } from 'components/CastInfo/CastInfo';\n\nexport const Cast = () => {\n  const { cast, isLoading, error } = useFetchMovieCast();\n\n  return (\n    <>\n      {isLoading && <h5>Loading...</h5>}\n      {error && <h5>Something went wrong...</h5>}\n      {cast && <CastInfo castInfo={cast} />}\n    </>\n  );\n};\n\nexport default Cast;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieActors } from 'service/api';\n\nexport const useFetchMovieCast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(false);\n\n    const getCastItem = async () => {\n      try {\n        const data = await fetchMovieActors(movieId);\n        setCast(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getCastItem();\n  }, [movieId]);\n\n  return { cast, isLoading, error };\n};\n"],"names":["CastStyled","styled","_templateObject","_taggedTemplateLiteral","CastItem","_templateObject2","NoPhoto2","_templateObject3","CastInfo","_ref","castInfo","_jsx","children","map","_ref2","cast_id","profile_path","name","character","_jsxs","src","concat","alt","Cast","_useFetchMovieCast","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","movieId","useParams","useEffect","getCastItem","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMovieActors","sent","t0","finish","stop","apply","arguments","useFetchMovieCast","_Fragment"],"sourceRoot":""}